#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(cl-fad
                              alexandria
                              parse-float) :silent t))

(defpackage :ros.script.genconf.3744665830
  (:use :cl :parse-float))
(in-package :ros.script.genconf.3744665830)

(defun gethexcolor (line)
  (string-right-trim " " (subseq line (1+ (position #\# line)))))

(defun hex2rgba (hexcolor alpha)
  (format nil
          "rgba(~a, ~a, ~a, ~a)~%"
          (parse-integer (subseq hexcolor 0 2) :radix 16)
          (parse-integer (subseq hexcolor 2 4) :radix 16)
          (parse-integer (subseq hexcolor 4 6) :radix 16)
          alpha))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((theme (cl-fad:merge-pathnames-as-file *load-pathname* (concatenate 'string "themes/" (first argv))))
        (alpha (if (second argv)
                   (alexandria:clamp (parse-float (second argv) :junk-allowed t) 0 1)
                   1))
        (template (cl-fad:merge-pathnames-as-file *load-pathname* "config.template"))
        (config (cl-fad:merge-pathnames-as-file *load-pathname* "config"))
        line)
    (if (cl-fad:file-exists-p theme)
        (with-open-file (fin template :direction :input :if-does-not-exist :error)
          (with-open-file (fout config :direction :output :if-exists :supersede)
            (tagbody parse-line
               (when (setq line (read-line fin nil nil))
                 (cond ((string= line "{{colors}}")
                        (with-open-file (theme-stream theme :direction :input :if-does-not-exist :error)
                          (tagbody parse-theme
                             (when (setq line (read-line theme-stream nil nil))
                               (if (search "background" line)
                                   (format fout "background = ~a~%" (hex2rgba (gethexcolor line) alpha))
                                   (format fout "~a~%" line))
                               (go parse-theme)))))
                       (t (format fout "~a~%" line)))
                 (go parse-line)))))
        (format t "無効なテーマです~%"))))
;;; vim: set ft=lisp lisp:
